// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: v1/user/user.proto

package v1_user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	// 手机号注册
	RegisterByMobile(ctx context.Context, in *RegisterByMobileRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	// 邮箱注册
	RegisterByEmail(ctx context.Context, in *RegisterByEmailRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	// 登录
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	// 获取图片验证码
	GetImageVerifyCode(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetImageVerifyCodeReply, error)
	// 发送手机验证码
	SendMobileVerifyCode(ctx context.Context, in *SendMobileVerifyCodeRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	// 发送邮箱验证码
	GetEmailVerifyCode(ctx context.Context, in *SendEmailVerifyCodeRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	// 通过手机修改密码
	ChangePasswdByMobile(ctx context.Context, in *ChangePasswdByMobileRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	// 通过邮箱修改密码
	ChangePasswdByEmail(ctx context.Context, in *ChangePasswdByEmailRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	// 账户信息
	GetAccountInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetAccountInfoReply, error)
	// 个人认证
	UserPersonAuth(ctx context.Context, in *UserPersonAuthRequest, opts ...grpc.CallOption) (*EmptyReply, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) RegisterByMobile(ctx context.Context, in *RegisterByMobileRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/api.v1.user.User/RegisterByMobile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) RegisterByEmail(ctx context.Context, in *RegisterByEmailRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/api.v1.user.User/RegisterByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/api.v1.user.User/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetImageVerifyCode(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetImageVerifyCodeReply, error) {
	out := new(GetImageVerifyCodeReply)
	err := c.cc.Invoke(ctx, "/api.v1.user.User/GetImageVerifyCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SendMobileVerifyCode(ctx context.Context, in *SendMobileVerifyCodeRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/api.v1.user.User/SendMobileVerifyCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetEmailVerifyCode(ctx context.Context, in *SendEmailVerifyCodeRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/api.v1.user.User/GetEmailVerifyCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ChangePasswdByMobile(ctx context.Context, in *ChangePasswdByMobileRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/api.v1.user.User/ChangePasswdByMobile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ChangePasswdByEmail(ctx context.Context, in *ChangePasswdByEmailRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/api.v1.user.User/ChangePasswdByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetAccountInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetAccountInfoReply, error) {
	out := new(GetAccountInfoReply)
	err := c.cc.Invoke(ctx, "/api.v1.user.User/GetAccountInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserPersonAuth(ctx context.Context, in *UserPersonAuthRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/api.v1.user.User/UserPersonAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	// 手机号注册
	RegisterByMobile(context.Context, *RegisterByMobileRequest) (*RegisterReply, error)
	// 邮箱注册
	RegisterByEmail(context.Context, *RegisterByEmailRequest) (*RegisterReply, error)
	// 登录
	Login(context.Context, *LoginRequest) (*EmptyReply, error)
	// 获取图片验证码
	GetImageVerifyCode(context.Context, *EmptyRequest) (*GetImageVerifyCodeReply, error)
	// 发送手机验证码
	SendMobileVerifyCode(context.Context, *SendMobileVerifyCodeRequest) (*EmptyReply, error)
	// 发送邮箱验证码
	GetEmailVerifyCode(context.Context, *SendEmailVerifyCodeRequest) (*EmptyReply, error)
	// 通过手机修改密码
	ChangePasswdByMobile(context.Context, *ChangePasswdByMobileRequest) (*EmptyReply, error)
	// 通过邮箱修改密码
	ChangePasswdByEmail(context.Context, *ChangePasswdByEmailRequest) (*EmptyReply, error)
	// 账户信息
	GetAccountInfo(context.Context, *EmptyRequest) (*GetAccountInfoReply, error)
	// 个人认证
	UserPersonAuth(context.Context, *UserPersonAuthRequest) (*EmptyReply, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) RegisterByMobile(context.Context, *RegisterByMobileRequest) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterByMobile not implemented")
}
func (UnimplementedUserServer) RegisterByEmail(context.Context, *RegisterByEmailRequest) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterByEmail not implemented")
}
func (UnimplementedUserServer) Login(context.Context, *LoginRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServer) GetImageVerifyCode(context.Context, *EmptyRequest) (*GetImageVerifyCodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageVerifyCode not implemented")
}
func (UnimplementedUserServer) SendMobileVerifyCode(context.Context, *SendMobileVerifyCodeRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMobileVerifyCode not implemented")
}
func (UnimplementedUserServer) GetEmailVerifyCode(context.Context, *SendEmailVerifyCodeRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailVerifyCode not implemented")
}
func (UnimplementedUserServer) ChangePasswdByMobile(context.Context, *ChangePasswdByMobileRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePasswdByMobile not implemented")
}
func (UnimplementedUserServer) ChangePasswdByEmail(context.Context, *ChangePasswdByEmailRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePasswdByEmail not implemented")
}
func (UnimplementedUserServer) GetAccountInfo(context.Context, *EmptyRequest) (*GetAccountInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountInfo not implemented")
}
func (UnimplementedUserServer) UserPersonAuth(context.Context, *UserPersonAuthRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPersonAuth not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_RegisterByMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterByMobileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).RegisterByMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.user.User/RegisterByMobile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).RegisterByMobile(ctx, req.(*RegisterByMobileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_RegisterByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).RegisterByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.user.User/RegisterByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).RegisterByEmail(ctx, req.(*RegisterByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.user.User/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetImageVerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetImageVerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.user.User/GetImageVerifyCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetImageVerifyCode(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SendMobileVerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMobileVerifyCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SendMobileVerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.user.User/SendMobileVerifyCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SendMobileVerifyCode(ctx, req.(*SendMobileVerifyCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetEmailVerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailVerifyCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetEmailVerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.user.User/GetEmailVerifyCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetEmailVerifyCode(ctx, req.(*SendEmailVerifyCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ChangePasswdByMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswdByMobileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ChangePasswdByMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.user.User/ChangePasswdByMobile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ChangePasswdByMobile(ctx, req.(*ChangePasswdByMobileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ChangePasswdByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswdByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ChangePasswdByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.user.User/ChangePasswdByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ChangePasswdByEmail(ctx, req.(*ChangePasswdByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.user.User/GetAccountInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetAccountInfo(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserPersonAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPersonAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserPersonAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.user.User/UserPersonAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserPersonAuth(ctx, req.(*UserPersonAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.user.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterByMobile",
			Handler:    _User_RegisterByMobile_Handler,
		},
		{
			MethodName: "RegisterByEmail",
			Handler:    _User_RegisterByEmail_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _User_Login_Handler,
		},
		{
			MethodName: "GetImageVerifyCode",
			Handler:    _User_GetImageVerifyCode_Handler,
		},
		{
			MethodName: "SendMobileVerifyCode",
			Handler:    _User_SendMobileVerifyCode_Handler,
		},
		{
			MethodName: "GetEmailVerifyCode",
			Handler:    _User_GetEmailVerifyCode_Handler,
		},
		{
			MethodName: "ChangePasswdByMobile",
			Handler:    _User_ChangePasswdByMobile_Handler,
		},
		{
			MethodName: "ChangePasswdByEmail",
			Handler:    _User_ChangePasswdByEmail_Handler,
		},
		{
			MethodName: "GetAccountInfo",
			Handler:    _User_GetAccountInfo_Handler,
		},
		{
			MethodName: "UserPersonAuth",
			Handler:    _User_UserPersonAuth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/user/user.proto",
}
