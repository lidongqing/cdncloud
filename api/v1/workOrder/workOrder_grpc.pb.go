// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: v1/workOrder/workOrder.proto

package v1_workOrder

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkOrderClient is the client API for WorkOrder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkOrderClient interface {
	// 工单提交
	AddWorkOrder(ctx context.Context, in *AddWorkOrderRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	// 工单列表
	GetWorkOrderList(ctx context.Context, in *GetWorkOrderListRequest, opts ...grpc.CallOption) (*GetWorkOrderListReply, error)
}

type workOrderClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkOrderClient(cc grpc.ClientConnInterface) WorkOrderClient {
	return &workOrderClient{cc}
}

func (c *workOrderClient) AddWorkOrder(ctx context.Context, in *AddWorkOrderRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/api.v1.workOrder.workOrder/AddWorkOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrderClient) GetWorkOrderList(ctx context.Context, in *GetWorkOrderListRequest, opts ...grpc.CallOption) (*GetWorkOrderListReply, error) {
	out := new(GetWorkOrderListReply)
	err := c.cc.Invoke(ctx, "/api.v1.workOrder.workOrder/GetWorkOrderList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkOrderServer is the server API for WorkOrder service.
// All implementations must embed UnimplementedWorkOrderServer
// for forward compatibility
type WorkOrderServer interface {
	// 工单提交
	AddWorkOrder(context.Context, *AddWorkOrderRequest) (*EmptyReply, error)
	// 工单列表
	GetWorkOrderList(context.Context, *GetWorkOrderListRequest) (*GetWorkOrderListReply, error)
	mustEmbedUnimplementedWorkOrderServer()
}

// UnimplementedWorkOrderServer must be embedded to have forward compatible implementations.
type UnimplementedWorkOrderServer struct {
}

func (UnimplementedWorkOrderServer) AddWorkOrder(context.Context, *AddWorkOrderRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWorkOrder not implemented")
}
func (UnimplementedWorkOrderServer) GetWorkOrderList(context.Context, *GetWorkOrderListRequest) (*GetWorkOrderListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkOrderList not implemented")
}
func (UnimplementedWorkOrderServer) mustEmbedUnimplementedWorkOrderServer() {}

// UnsafeWorkOrderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkOrderServer will
// result in compilation errors.
type UnsafeWorkOrderServer interface {
	mustEmbedUnimplementedWorkOrderServer()
}

func RegisterWorkOrderServer(s grpc.ServiceRegistrar, srv WorkOrderServer) {
	s.RegisterService(&WorkOrder_ServiceDesc, srv)
}

func _WorkOrder_AddWorkOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWorkOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkOrderServer).AddWorkOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.workOrder.workOrder/AddWorkOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkOrderServer).AddWorkOrder(ctx, req.(*AddWorkOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkOrder_GetWorkOrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkOrderListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkOrderServer).GetWorkOrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.workOrder.workOrder/GetWorkOrderList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkOrderServer).GetWorkOrderList(ctx, req.(*GetWorkOrderListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkOrder_ServiceDesc is the grpc.ServiceDesc for WorkOrder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkOrder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.workOrder.workOrder",
	HandlerType: (*WorkOrderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddWorkOrder",
			Handler:    _WorkOrder_AddWorkOrder_Handler,
		},
		{
			MethodName: "GetWorkOrderList",
			Handler:    _WorkOrder_GetWorkOrderList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/workOrder/workOrder.proto",
}
