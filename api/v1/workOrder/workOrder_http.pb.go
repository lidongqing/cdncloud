// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.3.1

package v1_workOrder

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationWorkOrderAddWorkOrder = "/api.v1.workOrder.workOrder/AddWorkOrder"
const OperationWorkOrderGetWorkOrderList = "/api.v1.workOrder.workOrder/GetWorkOrderList"

type WorkOrderHTTPServer interface {
	AddWorkOrder(context.Context, *AddWorkOrderRequest) (*EmptyReply, error)
	GetWorkOrderList(context.Context, *GetWorkOrderListRequest) (*GetWorkOrderListReply, error)
}

func RegisterWorkOrderHTTPServer(s *http.Server, srv WorkOrderHTTPServer) {
	r := s.Route("/")
	r.POST("/api/workOrder/addWorkOrder", _WorkOrder_AddWorkOrder0_HTTP_Handler(srv))
	r.GET("/api/workOrder/getWorkOrderList", _WorkOrder_GetWorkOrderList0_HTTP_Handler(srv))
}

func _WorkOrder_AddWorkOrder0_HTTP_Handler(srv WorkOrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddWorkOrderRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkOrderAddWorkOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddWorkOrder(ctx, req.(*AddWorkOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EmptyReply)
		return ctx.Result(200, reply)
	}
}

func _WorkOrder_GetWorkOrderList0_HTTP_Handler(srv WorkOrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetWorkOrderListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkOrderGetWorkOrderList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetWorkOrderList(ctx, req.(*GetWorkOrderListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetWorkOrderListReply)
		return ctx.Result(200, reply)
	}
}

type WorkOrderHTTPClient interface {
	AddWorkOrder(ctx context.Context, req *AddWorkOrderRequest, opts ...http.CallOption) (rsp *EmptyReply, err error)
	GetWorkOrderList(ctx context.Context, req *GetWorkOrderListRequest, opts ...http.CallOption) (rsp *GetWorkOrderListReply, err error)
}

type WorkOrderHTTPClientImpl struct {
	cc *http.Client
}

func NewWorkOrderHTTPClient(client *http.Client) WorkOrderHTTPClient {
	return &WorkOrderHTTPClientImpl{client}
}

func (c *WorkOrderHTTPClientImpl) AddWorkOrder(ctx context.Context, in *AddWorkOrderRequest, opts ...http.CallOption) (*EmptyReply, error) {
	var out EmptyReply
	pattern := "/api/workOrder/addWorkOrder"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWorkOrderAddWorkOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkOrderHTTPClientImpl) GetWorkOrderList(ctx context.Context, in *GetWorkOrderListRequest, opts ...http.CallOption) (*GetWorkOrderListReply, error) {
	var out GetWorkOrderListReply
	pattern := "/api/workOrder/getWorkOrderList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWorkOrderGetWorkOrderList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
